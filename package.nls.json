{
  "deno.displayName": "Deno",
  "deno.description": "Deno support for VSCode",
  "deno.dependency": "Deno Dependencies",
  "deno.command.restart_server": "Restart Deno Language Server",
  "deno.config.enabled": "Controls whether Deno is enabled or not.\n\n**Not recommended in global configuration**",
  "deno.config.dts_file": "The file path of the Deno TypeScript declaration file (.d.ts).\n\nIt can be a path that is relative to the project root, or an absolute path.\n\n**Not recommended in global configuration unless you are using an absolute path.**",
  "deno.config.import_map": "The file path of an import map.\n\nIt can be a path that is relative to the project root, or an absolute path.\n\n**Not recommended in global configuration**",
  "deno.initializing": "Initializing Deno Language Server...",
  "err.not_install_deno": "Could not find `deno` in your $PATH. Please install `deno`, then restart the extension.",
  "err.below_deno_minimum_requirements": "Deno's version is below minimum requirements. Please upgrade to v{0} or above.",
  "diagnostic.fix.create_module": "Create the module",
  "diagnostic.fix.fetch_module": "Fetch the module",
  "diagnostic.report.module_not_found_locally": "Could not find module `{0}` locally.",
  "diagnostic.report.invalid_import": "Import module `{0}` must be a relative path or remote HTTP URL.",

  "debugger.launch.program.description": "Absolute path to the program.",
  "debugger.stopOnEntry.description": "Automatically stop program after launch.",
  "debugger.launch.console.description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
  "debugger.launch.args.description": "Command line arguments passed to the program.",
  "debugger.restart.description": "Restart session after Deno has terminated.",
  "debugger.launch.cwd.description": "Absolute path to the working directory of the program being debugged.",
  "debugger.launch.runtimeExecutable.description": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If ommitted `deno` is assumed.",
  "debugger.launch.runtimeArgs.description": "Optional arguments passed to the runtime executable.",
  "debugger.launch.env.description": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
  "debugger.sourceMaps.description": "Use JavaScript source maps (if they exist).",
  "debugger.outFiles.description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
  "debugger.port.description": "Debug port to attach to. Default is 9229.",
  "debugger.address.description": "TCP/IP address of debug port. Default is 'localhost'.",
  "debugger.timeout.description": "Retry for this number of milliseconds to connect to Deno. Default is 10000 ms.",
  "debugger.smartStep.description": "Automatically step through generated code that cannot be mapped back to the original source.",
  "debugger.trace.description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
  "debugger.sourceMapPathOverrides.description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk. See README for details.",
  "debugger.skipFiles.description": "An array of file or folder names, or glob patterns, to skip when debugging.",
  "debugger.launch.envFile.description": "Absolute path to a file containing environment variable definitions.",
  "debugger.showAsyncStacks.description": "Show the async calls that led to the current call stack.",
  "debugger.launch.outputCapture.description": "From where to capture output messages: The debug API, or stdout/stderr streams.",
  "debugger.enableSourceMapCaching.description": "When sourcemaps are downloaded from a URL, cache them to disk.",
  "debugger.disableOptimisticBPs.description": "Don't set breakpoints in any file until a sourcemap has been loaded for that file.",
  "debugger.attach.processId.description": "ID of process to attach to.",
  "debugger.attach.localRoot.description": "The local source root that corresponds to the 'remoteRoot'.",
  "debugger.attach.remoteRoot.description": "The source root of the remote host.",
  "debugger.toggle.skipping.this.file": "Toggle Skipping this File"
}
